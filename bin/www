#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');
const comFn = require('../routes/common.js');
const url = 'mongodb://127.0.0.1:27017';

let MongoClient = require('mongodb').MongoClient;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, {
});
server.on('error', onError);
server.on('listening', onListening);
let addr = server.address().address;
if (addr==='::') {
  addr = 'localhost'
}
console.log(`server is running at:  http://${addr}:${server.address().port}`);

// 连接socket
let roomInfo = {};
io.on('connection', function (socket) {
  const ck = socket.request.headers.cookie;
  let userName = comFn.getCk(ck)['userName'];

  if (userName===undefined) {
    const randomNo = ~~(Math.random() * 1000000);
    userName = '游客·' + randomNo;
  }

  let hd = socket.request.headers;
  let roomId = /id=([^&]+)/.exec(hd.referer);
  if (Object.is(roomId, null)) {
    roomId = 0;
  } else {
    roomId = roomId[1];
  }

  if (roomInfo[roomId] === undefined) {
    roomInfo[roomId] = [userName];
  } else {
    if (roomInfo[roomId].indexOf(userName) < 0) {
      console.log('6666:' + socket.id)
      socket.join(roomId, () => {
        io.to(roomId).emit('sys', {
          msg: `${userName}进入房间`
        });
      });
      roomInfo[roomId].push(userName);
    }
  }

  socket.on('send msg', function (data) {
    socket.to(roomId).emit('get msg', {
      msg: data.params,
      userName: userName
    });
  });

  socket.on('disconnect', function(){
    io.to(roomId).emit('sys', {
      msg: `${userName}离开房间`
    });

    const userIdx = roomInfo[roomId].indexOf(userName);
    roomInfo[roomId].splice(userIdx, 1);
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
